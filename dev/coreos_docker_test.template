heat_template_version: 2013-05-23

description: |
  Testing Docker resource

resources:

  ##################################
  # CoreOS host for the containers #
  ##################################

  container_host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
            template: stackname-container-host
            params:
                stackname: { get_param: "OS::stack_name" }
      image: CoreOS (Alpha)
      flavor: 4 GB Performance
      config_drive: true
      user_data_format: RAW
      # Expose the docker rest API on the CoreOS machine (not secure)
      # user data copied from:
      # https://coreos.com/docs/launching-containers/building/customizing-docker/
      # #enable-the-remote-api-on-a-new-socket
      user_data: |
        #cloud-config
        coreos:
          units:
          - name: docker-tcp.socket
            command: start
            enable: yes
            content: |
              [Unit]
              Description=Docker Socket for the API

              [Socket]
              ListenStream=2375
              BindIPv6Only=both
              Service=docker.service

              [Install]
              WantedBy=sockets.target
          - name: enable-docker-tcp.service
            command: start
            content: |
              [Unit]
              Description=Enable the Docker Socket for the API

              [Service]
              Type=oneshot
              ExecStart=/usr/bin/systemctl enable docker-tcp.socket
##########################################################################################
# Enable alternative repositories example: https://coreos.com/docs/launching-
# containers/building/customizing-docker/#using-a-dockercfg-file-for-authentication
#        write_files:
#        - path: /home/core/.dockercfg
#          owner: core:core
#          permissions: 0644
#          content: |
#            {
#              "https://index.docker.io/v1/": {
#              "auth": "xXxXxXxXxXx=",
#              "email": "username@example.com"
#            },
#              "https://index.example.com": {
#              "auth": "XxXxXxXxXxX=",
#              "email": "username@example.com"
#            }
#          }
##########################################################################################

  ################################################
  # Generate random passwords for the wp db user #
  # and root mysql user                          #
  ################################################

  random_pass:
    type: OS::Heat::RandomString

  root_random_pass:
    type: OS::Heat::RandomString

  ################################################
  # Wordpress container wired to MySQL container #
  # https://registry.hub.docker.com/_/wordpress/ #
  ################################################

  wpcontainer:
    type: DockerInc::Docker::Container
    # don't know if the depends_on is really needed
    # but wait on the mysql container to start before
    # popping the wordpress container just in case
    depends_on: mysqlcontainer
    properties:
      name: wordpress-container
      image: wordpress
      env:
      - "WORDPRESS_DB_USER=wpuser"
      - "WORDPRESS_DB_NAME=wordpress"
      - str_replace:
          template: "WORDPRESS_DB_PASSWORD=password"
          params:
            password: { get_resource: random_pass }
      port_specs:
      - 80
      port_bindings:
        80/tcp:
          HostPort: 80
      links:
        mysql-container: mysql
      docker_endpoint:
        str_replace:
          template: "host:2375"
          params:
            host: { get_attr: [ container_host, accessIPv4 ] }

  ############################################
  # MySQL Container                          #
  # https://registry.hub.docker.com/_/mysql/ #
  ############################################

  mysqlcontainer:
    type: DockerInc::Docker::Container
    properties:
      name: mysql-container
      image: mysql
      env:
      - str_replace:
          template: "MYSQL_ROOT_PASSWORD=password"
          params:
            password: { get_resource: root_random_pass }
      - str_replace:
          template: "MYSQL_PASSWORD=password"
          params:
            password: { get_resource: random_pass }
      - "MYSQL_DATABASE=wordpress"
      - "MYSQL_USER=wpuser"
      docker_endpoint:
        str_replace:
          template: "host:2375"
          params:
            host: { get_attr: [ container_host, accessIPv4 ] }

outputs:

  ####################################################
  # Output the url for the WP blog and the status of #
  # each container                                   #
  ####################################################

  wordpress_url:
    description: URL to access the WordPress site
    value:
      str_replace:
        template: "http://address"
        params:
          address: { get_attr: [ container_host, accessIPv4 ] }

  mysql_status:
    description: Status of the MySQL container
    value: { get_attr: [ mysqlcontainer, info, State ] }

  wp_status:
    description: Status of the WordPress container
    value: { get_attr: [ wpcontainer, info, State ] }

